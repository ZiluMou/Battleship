//--------------------------------------
// Assignment (4)
// Written by:(Zilu Mou 40176355)
// For Comp 248 Section(PK-X)-Fall 2020
//--------------------------------------

 // This class is where the array is filled with objects. It also includes display methods,
 // methods that allow user and computer to place their ships and grenades. 
 // In this class, there are also methods that launches rockets by two parties and methods 
 // that evaluate the results of rockets.
 

import java.util.Scanner;
import java.util.Random;


public class array1 {

	public static final int totalNumberOfShips=6;
	public static final int totalNumberOfGrenades=4;
	private static int userShipLeft=6;
	private static int compShipLeft=6;



	
	public static void fillBattle(object [][] a)
	{
		for (int row=0; row<a.length; row++)
			for (int column=0; column<a[row].length; column++)
				a[row][column]=new object();
	}


	
	public static void showBattle(object [][] a)
	{
		int row,column;
		for (row=0; row<a.length; row++)
		{for (column=0; column<a[row].length; column++)
			System.out.print(a[row][column].getValue()+"  ");
		System.out.println();}
	}


	//These show___ methods do not return values, but simply update the information.
	
	public static void showBattleCalled(object[][]a)
	{
		int row,column;
		for (row=0; row<a.length; row++)
		{for (column=0; column<a[row].length; column++)
			if(a[row][column].getCalled())
				System.out.print(a[row][column].getValue()+"  ");
			else
				System.out.print('_'+"  ");
		System.out.println();
		}
	}


	
	public static void userInput()
	{	
		Scanner keyboard=new Scanner(System.in);

		int shipUsed=1, grenadeUsed=1;
		while (shipUsed<=totalNumberOfShips)
		{
			System.out.println("Please enter the coordinates of your ship #"+shipUsed);
			String input=keyboard.nextLine();
			char columnInput=input.toUpperCase().charAt(0);
			int rowInput=Integer.parseInt(input.substring(1));
			if (inTheGrid(columnInput,rowInput)&&battle.getBattleArray()[rowInput-1][charToIndex(columnInput)].getIfOccupied()==false)
			{
				System.out.println("Your ship #"+shipUsed+" has been put in "+columnInput+rowInput);
				shipUsed++;
				battle.getBattleArray()[rowInput-1][charToIndex(columnInput)].setObjectToShipByUser();
			}

			else if(inTheGrid(columnInput,rowInput)==false)
			{
				System.out.println("Invalid input.You should enter a coordinate within the 8*8 grid. Please try again.");

			}
			else if (battle.getBattleArray()[rowInput-1][charToIndex(columnInput)].getIfOccupied()==true)
			{
				System.out.println("You have put a ship or a grenade in this position. Please try again.");
			}
		}
		while (grenadeUsed<=totalNumberOfGrenades)
		{
			System.out.println("Please enter the coordinates of your Grenade #"+grenadeUsed);
			String input=keyboard.nextLine();
			char columnInput=input.toUpperCase().charAt(0);
			int rowInput=Integer.parseInt(input.substring(1));
			if (inTheGrid(columnInput,rowInput)&&battle.getBattleArray()[rowInput-1][charToIndex(columnInput)].getIfOccupied()==false)
			{
				System.out.println("Your grenade #"+grenadeUsed+" has been put in "+columnInput+rowInput);
				grenadeUsed++;
				battle.getBattleArray()[rowInput-1][charToIndex(columnInput)].setObjectToGrenadeByUser();
			}

			else if(inTheGrid(columnInput,rowInput)==false)
			{
				System.out.println("Invalid input.You should enter a coordinate within the 8*8 grid. Please try again.");	
			}
			else if (battle.getBattleArray()[rowInput-1][charToIndex(columnInput)].getIfOccupied()==true)
				System.out.println("You have put a ship or a grenade in this position. Please try again.");
		}	
	}

	
	public static void computerInput()
	{
		Random randomInt=new Random();
		int shipUsed=1, grenadeUsed=1;
		while (shipUsed<=totalNumberOfShips)
		{
			int index1=randomInt.nextInt(8);
			int index2=randomInt.nextInt(8);
			if (battle.getBattleArray()[index1][index2].getIfOccupied()==false)
			{
				shipUsed++;
				battle.getBattleArray()[index1][index2].setObjectToShipByComp();
			}		
		}	
		while (grenadeUsed<=totalNumberOfGrenades)
		{
			int index1=randomInt.nextInt(8);
			int index2=randomInt.nextInt(8);
			if (battle.getBattleArray()[index1][index2].getIfOccupied()==false)
			{
				grenadeUsed++;
				battle.getBattleArray()[index1][index2].setObjectToGrenadeByComp();
			}		
		}
	}

	//This method reads the user's input and launch a rocket to the position, then invoke the result method 
	 // to see the result.
	 
	public static void userRocket()
	{

		Scanner keyboard=new Scanner(System.in);
		System.out.println("Enter the position of your rocket:");
		String input=keyboard.nextLine();
		char columnInput=input.toUpperCase().charAt(0);
		int rowInput=Integer.parseInt(input.substring(1)); 
		if (inTheGrid(columnInput,rowInput))
			userRocketResult(rowInput-1,charToIndex(columnInput));
		else
		{System.out.println("Out of grid, please try again!");
		userRocket();
		}
	}

	//In this method the computer will randomly generate integers and launch his rocket, and then 
	//invoke the result method to see what's the result.
	 
	public static void compRocket()
	{
		Random randomInt=new Random();
		int index1=randomInt.nextInt(8);
		int index2=randomInt.nextInt(8);
		System.out.println("The computer has launched his rocket");
		System.out.println("Here is the result.");
		compRocketResult(index1,index2);

	}

	
	private static void userRocketResult(int input1,int input2)
	{
		if(battle.getBattleArray()[input1][input2].compShipGetHit())
		{compShipLeft--;
		battle.getBattleArray()[input1][input2].setGetCalled();
		System.out.println("Hit computer's ship");
		showBattleCalled(battle.getBattleArray());
		}
		else if(battle.getBattleArray()[input1][input2].userShipGetHit())
		{
			userShipLeft--;
			battle.getBattleArray()[input1][input2].setGetCalled();
			System.out.println("Hit your own ship");
			showBattleCalled(battle.getBattleArray());
		}
		else if (battle.getBattleArray()[input1][input2].compGrenadeGetHit()
				||battle.getBattleArray()[input1][input2].userGrenadeGetHit())
		{
			battle.getBattleArray()[input1][input2].setGetCalled();
			System.out.println("Boom! Grenade explode!");
			showBattleCalled(battle.getBattleArray());
			compRocket();
		}
		else if (battle.getBattleArray()[input1][input2].emptyPositionGetHit())
		{
			battle.getBattleArray()[input1][input2].setGetCalled();
			battle.getBattleArray()[input1][input2].setValue('*');
			System.out.println("Empty slot. You hit Nothing.");
			showBattleCalled(battle.getBattleArray());
		}
		else if (battle.getBattleArray()[input1][input2].getCalled())
		{
			System.out.println("Postion has been hit before!");
			showBattleCalled(battle.getBattleArray());
		}
	}

	 //This method evaluates the computer's rocket result. It's almost the same as the user's 
	 //rocket result method, except the display content. 
	 //@param input1 Row index.
	 //@param input2 Column index.
	 
	private static void compRocketResult(int input1,int input2)
	{
		if(battle.getBattleArray()[input1][input2].compShipGetHit())
		{compShipLeft--;
		battle.getBattleArray()[input1][input2].setGetCalled();
		System.out.println("The computer has hit is own ship");
		showBattleCalled(battle.getBattleArray());
		}
		else if(battle.getBattleArray()[input1][input2].userShipGetHit())
		{
			userShipLeft--;
			battle.getBattleArray()[input1][input2].setGetCalled();
			System.out.println("The computer has hit one of your ship");
			showBattleCalled(battle.getBattleArray());
		}
		else if (battle.getBattleArray()[input1][input2].compGrenadeGetHit()
				||battle.getBattleArray()[input1][input2].userGrenadeGetHit())
		{
			battle.getBattleArray()[input1][input2].setGetCalled();
			System.out.println("Wow, the computer has hit a grenade!");
			showBattleCalled(battle.getBattleArray());
			userRocket();
		}
		else if (battle.getBattleArray()[input1][input2].emptyPositionGetHit())
		{
			battle.getBattleArray()[input1][input2].setGetCalled();
			battle.getBattleArray()[input1][input2].setValue('*');
			System.out.println("The computer hit an empty slot.");
			showBattleCalled(battle.getBattleArray());
		}
		else if (battle.getBattleArray()[input1][input2].getCalled())
		{
			System.out.println("The computer has hit a slot that has been called before.");
			showBattleCalled(battle.getBattleArray());
		}
	}


	
	 
	private static boolean inTheGrid(char input1, int input2)
	{

		return ((input1=='A'||input1=='B'||input1=='C'||input1=='D'||input1=='E'||input1=='F'||input1=='G'||input1=='H')&&(input2==1||input2==2
				||input2==3||input2==4||input2==5||input2==6||input2==7||input2==8));

	}

	
	private static int charToIndex(char input)
	{
		int index=0;
		switch (input)
		{
		case 'A':
			index=0;
			break;
		case 'B':
			index=1;
			break;
		case 'C':
			index=2;
			break;
		case 'D':
			index=3;
			break;
		case 'E':
			index=4;
			break;
		case 'F':
			index=5;
			break;
		case 'G':
			index=6;
			break;
		case 'H':
			index=7;
			break;
		}
		return index;
	}

	
	public static int getUserShipLeft()
	{
		return userShipLeft;
	}
